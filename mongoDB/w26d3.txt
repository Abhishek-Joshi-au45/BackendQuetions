Use sample_mflix dataset and write aggregation pipelines for the below queries,


Movies Collection
1. Write a MongoDB query to display average number of awards won by a
movie (use aggregate function with $avg operator).

Ans :  {
         $group:{
            _id:"$title",
            average_wins:{
            $avg:"$awards.wins"
                }
        },





2. Write a MongoDB query to display most awards won by a movie (use
aggregate function with $max operator).

Ans :    $group:{
                _id:["$title","$awards"],
                max_Awards:{
                    $max:"$awards.wins"
                }
            }
        },





3. Write a MongoDB query to display the total number of documents in the
collection movies.

Ans :    {
        $group:{
            _id:"$type",
            count:{
                $sum:1
            }
        }
        }





4. Write a MongoDB query to display the total number of users by name (use
db.collection.distinct(field, query, options) and length) in the collection
movies.

Ans :    {
        $group:{
            _id:"$type",
            count:{
                $user:1
            }
        }
        }





Comments Collection

1. Write a MongoDB query to display any 5 documents using pretty format in
the collection comments.

Ans :  const distinctUser = async(req,res)=>{
    const user = await commentModel.distinct("name")
    let len = user.length
    console.log(len)
    res.send({status:"succes",len})
}




2. Write a MongoDB query to display 5 documents sorted by name using pretty
format in the collection comments.

Ans : const sortByName = async(req,res)=>{
    try{
        const sbn = await commentModel.aggregate([{
            $sort:{
                name:1
            }
        },{
            $limit:5
        }
    
    ])
    res.send({status:"success",sbn})
    }
    catch(err){
        console.log("cannot sort by name")
    }
}






3. Write a MongoDB query to display 5 latest comments (documents sorted by
date in descending order) from "Megan Richards" using pretty format in the
collection comments.

Ans :   const latestComments = async(req,res)=>{
    try{
        const lc = await commentModel.aggregate([
            {
            $match:{
                name:"Megan Richards"
            }
        },
        {
            $sort:{
                date:-1
            }
        },
        {
            $limit:5
        }
    ])
    res.send({status:"success",lc})
    }
    catch(err){
        console.log("error in sorting by name")
        res.send({status:"error"})
    }
}







4. Write a MongoDB query to display the total number of comments posted by a
user (use aggregate function on name) in the collection comments.

Ans :  const totalComments = async(req,res)=>{
    try{
        const tc = await commentModel.aggregate([{
            $group:{
                _id:"$name",
                No_of_comments:{
                    $sum:1
                }
            }
        }])
        res.send({status:"success",tc})
    }
    catch(err){
        console.log("error in finndin no of comments")
    }
}









5. Write a MongoDB query to display the maximum number of comments
posted by a user (use aggregate function on name with $sum operator and
then use $sort) in the collection comments. 

Ans :   const maxComments = async(req,res)=>{
    try{
        const mc = await commentModel.aggregate([
        {
            $group:{
                _id:"$name",
                No_of_comments:{
                    $sum:1
                }
            }
        },
        {
            $sort:{
                No_of_comments:-1
            }
        },
        {
            $limit:1
        }
    ])
    res.send({status:"success",mc})
    }
    catch(err){
        console.log("error in finding user with max comment")
    }
    
}
